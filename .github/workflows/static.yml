# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  # push:
  #   branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # - name: Create directory
    #   run: |
    #     mkdir -p out

    # - name: Download artifact
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: github-pages
    #     # path: out

    # - name: Use the Artifact
    #   run: |
    #     ls -lR github-pages

    # - name: Download Content
    #   run: |
    #     mkdir -p out
    #     curl https://pes-magic.github.io/act-test/index.html --output ./out/index.html

    - name: Get current date in JST
      id: date
      run: |
        echo "::set-output name=date::$(TZ='Asia/Tokyo' date +'%Y-%m-%d %H:%M:%S')"
      shell: bash

    - name: Build HTML
      run: |
        mkdir -p out
        find ./out/ -type f -delete
        echo "<html><body>This page was deployed on ${{ steps.date.outputs.date }}</body></html>" > out/index.html

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: out

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

    # - name: List artifacts
    #   id: artifacts2
    #   uses: actions/github-script@v6
    #   with:
    #     script: |
    #       let artifacts = await github.rest.actions.listArtifactsForRepo({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo
    #       });

    #       let artifactNames = artifacts.data.artifacts.map(a => a.name);
    #       console.log(`Found artifacts: ${artifactNames.join(", ")}`);

    #       return artifactNames;

    #     result-encoding: string

    # - name: Print artifact names
    #   run: |
    #     echo "Artifact names: ${{ steps.artifacts2.outputs.result }}"
